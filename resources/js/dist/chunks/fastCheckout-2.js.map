{"version":3,"file":"chunks/fastCheckout-2.js","mappings":";;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;AC1DgB;;AAErC;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAAS,yDAAiB;AAC1B;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjC6C;AACkB;;AAE/D,4BAA4B,mBAAO,CAAC,wGAAuB;;AAE3D;;AAEA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA,QAAQ,gEAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,QAAQ,gEAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO,4BAA4B;AACnC;AACA;;AAEA,WAAW,wDAAS;AACpB,UAAU,yDAAY;AACtB;AACA;AACA,8HAA8H;AAC9H;AACA;AACA;AACA,yCAAyC;;AAEzC,oGAAoG;;AAEpG;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA,+DAAe,EAAE,oFAAoF,EAAC;;;;;;;;;;;;;;;;;;;;;;;ACnP5C;AACJ;;AAEtD;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA,8BAA8B;AAC9B;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,kEAAY;AAC7C;AACA,+BAA+B,2DAAkB;AACjD,iCAAiC,kEAAY;AAC7C;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAAe,EAAE,2DAA2D,EAAC","sources":["webpack://fastcheckout/./node_modules/Ceres/resources/js/src/app/exceptions/ExceptionMap.js","webpack://fastcheckout/./node_modules/Ceres/resources/js/src/app/helper/url.js","webpack://fastcheckout/./node_modules/Ceres/resources/js/src/app/services/ApiService.js","webpack://fastcheckout/./node_modules/Ceres/resources/js/src/app/services/NotificationService.js"],"sourcesContent":["export const exceptionMap = new Map(\n    [\n        [\"0\", \"errorActionIsNotExecuted\"],\n        [\"1\", \"notificationsItemNotAdded\"],\n        [\"2\", \"notificationsNotEnoughStockItem\"],\n        [\"3\", \"notificationsInvalidResetPasswordUrl\"],\n        [\"4\", \"notificationsCheckPassword\"],\n        [\"5\", \"notificationsItemBundleSplitted\"],\n        [\"6\", \"notificationsItemOutOfStock\"],\n        [\"7\", \"newsletterOptOutSuccessMessage\"],\n        [\"8\", \"newsletterOptInMessage\"],\n        [\"9\", \"notificationsBasketItemsRemoved\"],\n        [\"10\", \"notificationsBasketItemsRemovedForLanguage\"],\n        [\"11\", \"notificationsNoEmailEntered\"],\n        [\"12\", \"notificationsWarningOverselling\"],\n        [\"13\", \"consentReCaptchaCookieNotSet\"],\n        [\"14\", \"notificationsBasketItemsRemovedForCurrency\"],\n        [\"15\", \"notificationsBasketItemsRemovedForShippingCountry\"],\n        [\"16\", \"notificationsBasketItemsRemovedForContactClass\"],\n        [\"110\", \"errorBasketItemVariationNotFound\"],\n        [\"111\", \"errorBasketItemNotEnoughStockForVariation\"],\n        [\"112\", \"errorBasketItemMaximumQuantityReachedForItem\"],\n        [\"113\", \"errorBasketItemMaximumQuantityReachedForVariation\"],\n        [\"114\", \"errorBasketItemMinimumQuantityNotReachedForVariation\"],\n        [\"115\", \"errorCreateOrderRetryTimeNotReached\"],\n        [\"210\", \"errorVatService\"],\n        [\"211\", \"errorVatNumberValidation\"],\n        [\"212\", \"errorVatServiceFallback\"],\n        [\"301\", \"notificationRemoveCouponMinimumOrderValueIsNotReached\"],\n        [\"302\", \"couponNoMatchingItemInBasket\"],\n        [\"401\", \"notificationsCalculateShippingFailed\"],\n        [\"501\", \"couponPromotionRequired\"],\n        [\"502\", \"errorGiftCardReturnQuantity\"],\n        [\"1018\", \"couponMinOrderValueNotReached\"],\n        [\"1051\", \"couponnotUsableForSpecialOffer\"],\n        [\"1070\", \"couponAlreadyUsedOrInvalidCouponCode\"],\n        [\"1078\", \"couponCampaignExpired\"],\n        [\"1126\", \"couponNoMatchingItemInBasket\"],\n        [\"1329\", \"couponOnlySubscription\"],\n        [\"1330\", \"couponOnlySingleUsage\"],\n        [\"1331\", \"couponNoOpenAmount\"],\n        [\"1332\", \"couponExpired\"],\n        [\"1334\", \"couponOnlyForNewCustomers\"],\n        [\"1335\", \"couponOnlyForExistingCustomers\"],\n        [\"1336\", \"couponWrongCustomerGroup\"],\n        [\"1337\", \"couponWrongCustomerType\"],\n        [\"1338\", \"couponNoCustomerTypeProvided\"],\n        [\"1339\", \"couponNoCustomerTypeActivated\"],\n        [\"1340\", \"couponNoCustomerGroupActivated\"],\n        [\"1341\", \"couponCampaignNoWebstoreActivated\"],\n        [\"1342\", \"couponCampaignWrongWebstoreId\"],\n        [\"1343\", \"couponCampaignNoWebstoreIdGiven\"],\n        [\"1400\", \"csrfTokenMismatch\"],\n        [\"1401\", \"accessKeyMailSent\"],\n        [\"1402\", \"accessKeyMailFailed\"]\n    ]\n);\n\nexport default exceptionMap;\n\n","import { isNullOrUndefined } from \"./utils\";\n\nexport function normalizeUrl(url)\n{\n    const urlParts = url.split(\"?\");\n    const urlParams = urlParts[1];\n\n    let urlPath = urlParts[0];\n\n    if (App.urlTrailingSlash && urlPath.substr(-1, 1) !== \"/\")\n    {\n        urlPath += \"/\";\n    }\n    else if (!App.urlTrailingSlash && urlPath.substr(-1, 1) === \"/\")\n    {\n        urlPath = urlPath.substr(0, urlPath.length - 1);\n    }\n\n    let targetUrl = urlPath;\n\n    if (!isNullOrUndefined(urlParams) && urlParams.length > 0)\n    {\n        targetUrl += \"?\" + urlParams;\n    }\n\n    return targetUrl;\n}\n\nexport function pathnameEquals(pathname)\n{\n    return window.location.pathname === pathname ||\n        window.location.pathname === pathname + \"/\" ||\n        window.location.pathname + \"/\" === pathname;\n}\n","import { normalizeUrl } from \"../helper/url\";\nimport { isDefined, isNullOrUndefined } from \"../helper/utils\";\n\nconst NotificationService = require(\"./NotificationService\");\n\nconst _eventListeners = {};\n\nlet _initialRestCall = true;\n\nexport function initListener()\n{\n    $(document).ready(() =>\n    {\n        const token = $(\"input[id=\\\"csrf-token\\\"]\").val();\n\n        $.ajaxSetup({\n            beforeSend: (jqxhr, settings) =>\n            {\n                /*\n                    Setting the csrf token for every ajax call can hinder cross origin rest calls from workinmg.\n                    Using beforeSend makes sure that the header is only set for requests to our backend.\n                 */\n                if (token && (settings.url.includes(document.location.hostname) || settings.url.startsWith(\"/\")))\n                {\n                    jqxhr.setRequestHeader(\"X-CSRF-TOKEN\", token);\n                }\n            }\n        });\n    });\n\n    $(document).ajaxComplete((ajaxEvent, xhr, options) =>\n    {\n        let response;\n\n        try\n        {\n            response = JSON.parse(xhr.responseText);\n        }\n        catch (exception)\n        {\n\n        }\n\n        if (response)\n        {\n            triggerEvent(\"_before\", response);\n\n            for (const event in response.events)\n            {\n                triggerEvent(\"_before_\" + event, response.events[event]);\n                triggerEvent(event, response.events[event]);\n                triggerEvent(\"_after_\" + event, response.events[event]);\n            }\n\n            if (!options.supressNotifications)\n            {\n                _printMessages(response);\n            }\n\n            triggerEvent(\"_after\", response);\n\n            if (response.error?.code === 1400)\n            {\n                window.location.reload();\n            }\n        }\n    });\n}\n\nexport function listen(event, handler)\n{\n    _eventListeners[event] = _eventListeners[event] || [];\n    _eventListeners[event].push(handler);\n}\n\nexport function before(event, handler)\n{\n    if (isNullOrUndefined(handler) && typeof event === \"function\")\n    {\n        listen(\"_before\", event);\n    }\n    else\n    {\n        listen(\"_before_\" + event, handler);\n    }\n}\n\nexport function after(event, handler)\n{\n    if (isNullOrUndefined(handler) && typeof event === \"function\")\n    {\n        listen(\"_after\", event);\n    }\n    else\n    {\n        listen(\"_after_\" + event, handler);\n    }\n}\n\nexport function triggerEvent(event, payload)\n{\n    if (_eventListeners[event])\n    {\n        for (let i = 0; i < _eventListeners[event].length; i++)\n        {\n            const listener = _eventListeners[event][i];\n\n            if (typeof listener !== \"function\")\n            {\n                continue;\n            }\n            listener.call(Object, payload);\n        }\n    }\n}\n\nexport function get(url, data, config)\n{\n    config = config || {};\n    config.method = \"GET\";\n    if (_initialRestCall)\n    {\n        data = data || {};\n        data.initialRestCall = true;\n        _initialRestCall = false;\n    }\n\n    return send(url, data, config);\n}\n\nexport function put(url, data, config)\n{\n    config = config || {};\n    config.method = \"PUT\";\n    return send(url, data, config);\n}\n\nexport function post(url, data, config)\n{\n    config = config || {};\n    config.method = \"POST\";\n    return send(url, data, config);\n}\n\nexport function del(url, data, config)\n{\n    config = config || {};\n    config.method = \"DELETE\";\n    return send(url, data, config);\n}\n\nexport function send(url, data = {}, config)\n{\n    const deferred = $.Deferred();\n\n    data = isDefined(data) ? data : {};\n    url = normalizeUrl(url);\n    config = config || {};\n    config.dataType = config.dataType || \"json\";\n    config.contentType = typeof config.contentType !== \"undefined\" ? config.contentType : \"application/x-www-form-urlencoded; charset=UTF-8\";\n    config.doInBackground = !!config.doInBackground;\n    config.supressNotifications = !!config.supressNotifications;\n    config.keepOriginalResponse = !!config.keepOriginalResponse;\n    config.headers = config.headers || { \"Accept-Language\": App.language };\n\n    const csrfToken = config.headers[\"X-CSRF-TOKEN\"] || (document.getElementById(\"csrf-token\") || {}).value;\n\n    if (csrfToken)\n    {\n        config.headers[\"X-CSRF-TOKEN\"] = csrfToken;\n    }\n\n    data.templateType = App.templateType;\n    config.data = data;\n\n    const request = $.ajax(url, config)\n        .done(function(response)\n        {\n            if (config.keepOriginalResponse)\n            {\n                deferred.resolve(response);\n            }\n            else\n            {\n                deferred.resolve(response.data || response);\n            }\n        })\n        .fail(function(jqXHR)\n        {\n            const response = jqXHR.responseText ? $.parseJSON(jqXHR.responseText) : {};\n\n            deferred.reject(response, jqXHR.status);\n        });\n\n    deferred.abort = request.abort;\n\n    return deferred;\n}\n\nfunction _printMessages(response)\n{\n    let notification;\n\n    if (response.error && response.error.message.length > 0)\n    {\n        notification = NotificationService.error(response.error);\n    }\n\n    if (response.success && response.success.message.length > 0)\n    {\n        notification = NotificationService.success(response.success);\n    }\n\n    if (response.warn && response.warn.message.length > 0)\n    {\n        notification = NotificationService.warn(response.warn);\n    }\n\n    if (response.info && response.info.message.length > 0)\n    {\n        notification = NotificationService.info(response.info);\n    }\n\n    if (response.debug && response.debug.class.length > 0)\n    {\n        notification.trace(response.debug.file + \"(\" + response.debug.line + \"): \" + response.debug.class);\n        for (let i = 0; i < response.debug.trace.length; i++)\n        {\n            notification.trace(response.debug.trace[i]);\n        }\n    }\n}\n\nexport function setToken(token)\n{\n    this._token = token;\n}\n\nexport function getToken()\n{\n    return this._token;\n}\n\nexport default { get, put, post, del, send, setToken, getToken, listen, before, after, initListener };\n","import { exceptionMap } from \"../exceptions/ExceptionMap\";\nimport TranslationService from \"./TranslationService\";\n\nlet notificationCount = 0;\nconst notifications     = new NotificationList();\nconst handlerList = [];\n\nexport function listen(handler)\n{\n    handlerList.push(handler);\n}\n\nfunction _trigger()\n{\n    for (let i = 0; i < handlerList.length; i++)\n    {\n        handlerList[i].call({}, notifications.all());\n    }\n}\n\nexport function log(message, prefix)\n{\n    const notification = new Notification(message);\n\n    if (App.config.log.data.indexOf(\"log_messages\") >= 0)\n    {\n        console.log((prefix || \"\") + \"[\" + notification.code + \"] \" + notification.message);\n\n        for (let i = 0; i < notification.stackTrace.length; i++)\n        {\n            log(notification.stackTrace[i], \" + \");\n        }\n    }\n\n    return notification;\n}\n\nexport function info(message)\n{\n    const notification = new Notification(message, \"info\");\n\n    if (App.config.log.data.indexOf(\"print_infos\") >= 0)\n    {\n        _printNotification(notification);\n    }\n\n    return notification;\n}\n\nexport function warn(message)\n{\n    const notification = new Notification(message, \"warning\");\n\n    if (App.config.log.data.indexOf(\"print_warnings\") >= 0)\n    {\n        _printNotification(notification);\n    }\n\n    return notification;\n}\n\nexport function error(message)\n{\n    const notification = new Notification(message, \"danger\");\n\n    if (App.config.log.data.indexOf(\"print_errors\") >= 0)\n    {\n        _printNotification(notification);\n    }\n\n    return notification;\n}\n\nexport function success(message)\n{\n    const notification = new Notification(message, \"success\");\n\n    if (App.config.log.data.indexOf(\"print_success\") >= 0)\n    {\n        _printNotification(notification);\n    }\n\n    return notification;\n}\n\nexport function getNotifications()\n{\n    return notifications;\n}\n\nfunction _printNotification(notification)\n{\n    if (notification.code > 0 && exceptionMap.has(notification.code.toString()))\n    {\n        notification.message = TranslationService.translate(\n            \"Ceres::Template.\" + exceptionMap.get(notification.code.toString()),\n            notification.placeholder\n        );\n    }\n    notifications.add(notification);\n    log(notification);\n\n    _trigger();\n\n    return notification;\n}\n\nfunction Notification(data, context)\n{\n    if (App.config.log.data.indexOf(\"print_stack_trace\") < 0 && typeof (data) === \"object\")\n    {\n        data.stackTrace = [];\n    }\n    const id   = notificationCount++;\n    const self = {\n        id        : id,\n        code      : data.code || 0,\n        message   : data.message || data || \"\",\n        placeholder: data.placeholder || null,\n        context   : context || \"info\",\n        stackTrace: data.stackTrace || [],\n        close     : close,\n        closeAfter: closeAfter,\n        trace     : trace\n    };\n\n    return self;\n\n    function close()\n    {\n        notifications.remove(self);\n        _trigger();\n    }\n\n    function closeAfter(timeout)\n    {\n        setTimeout(function()\n        {\n            notifications.remove(self);\n            _trigger();\n        }, timeout);\n    }\n\n    function trace(message, code)\n    {\n        if (App.config.log.data.indexOf(\"print_stack_trace\") >= 0)\n        {\n            self.stackTrace.push({\n                code   : code || 0,\n                message: message\n            });\n        }\n    }\n}\n\nfunction NotificationList()\n{\n    const elements = [];\n\n    return {\n        all   : all,\n        add   : add,\n        remove: remove\n    };\n\n    function all()\n    {\n        return elements;\n    }\n\n    function add(notification)\n    {\n        elements.push(notification);\n    }\n\n    function remove(notification)\n    {\n        for (let i = 0; i < elements.length; i++)\n        {\n            if (elements[i].id === notification.id)\n            {\n                elements.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n\nexport default { log, info, warn, error, success, getNotifications, listen };\n"],"names":[],"sourceRoot":""}